#!/usr/bin/env sh
export APASH_VERSION="0.2.0-snapshot"

##############################################################################
# @name apash
# @brief Wrapper of the main script to execute apash with the desired interpreter.
#
# @description
#   Launch apash according to the environment.
#   Note: POSIX operations must be used as much as possible in this script.
#
#   Logic:
#      1. Determine the shell type.
#      2. Exit if the shell is not supported.
#      3. Determine the HOME dir.
#      4. Force the interpreter of the apash script by the shebang.
#
# 

apash_main(){
  # Get the type of shell (only bash and zsh supported for the moment). Skipped if already defined.
  [ -z "$APASH_SHELL" ] && [ -n "$BASH_VERSION" ] && export APASH_SHELL="bash"
  [ -z "$APASH_SHELL" ] && [ -n "$ZSH_VERSION"  ] && export APASH_SHELL="zsh"

  # Prevent execution if declared APASH_SHELL is not supported.
  if [ ! "$APASH_SHELL" = "bash" ] && [ ! "$APASH_SHELL" = "zsh" ] && [ ! "$APASH_SHELL" = "ksh" ];then
    echo "$(date +"%FT%T.%3N%z") [FATAL] apash ($LINENO): The apash shell '$APASH_SHELL' is not supported"
    return 1
  fi

  # Calculate potential apash home directory if not defined.
  # But it remains recommended to set it.
  if [ -z "$APASH_HOME_DIR" ]; then
    if [ -n "$BASH_VERSION" ]; then
      APASH_HOME_DIR=$(dirname "$(realpath "$(command -v -- "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}")")")
    elif [ -n "$ZSH_VERSION"  ]; then
      APASH_HOME_DIR="${0:h}"
    else # POSIX
      APASH_HOME_DIR="$( cd -P -- "$(dirname -- "$(command -v -- "$0")")" && pwd -P )"
    fi
  fi
  export APASH_HOME_DIR

  # If no argument, then display the version.
  if [ $# -eq 0 ]; then
    echo "version: $APASH_VERSION"
  
  # Check if the action is to source the script
  elif [ "${1:-}" = "source" ]; then
    
    # If no BASH_VERSION nor ZSH_VERSION means that default sh cannot source apash.
    if [ -z "$BASH_VERSION" ] && [ -z "$ZSH_VERSION" ]; then
      echo "$(date +"%FT%T.%3N%z") [FATAL] apash ($LINENO): The default shell (sh) is not supported for sourcing. Please check shebang."
      return 1
    fi

    # shellcheck source=/dev/null
    . "$APASH_HOME_DIR/apash.source"
  else
    # Execute the corresponding script with correct shebang.
    "$APASH_HOME_DIR/apash.$APASH_SHELL" "$@"
  fi
}

# Wrap execution in a function in order to use return statement.
apash_main "$@"
